from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.units import inch
from datetime import datetime

def write_report(username, interview_data, filename="voice_interview_report.pdf", role=None, final_evaluation=None):
    """
    Generate a comprehensive interview report with Rick's personal touch - silent background operation.
    
    Args:
        username (str): Name of the candidate
        interview_data (list): List of interview Q&A data
        filename (str): Output filename
        role (str): Interview role
        final_evaluation (dict): Final evaluation results
    """
    try:
        doc = SimpleDocTemplate(filename, pagesize=letter)
        styles = getSampleStyleSheet()
        story = []
        
        # Title with Rick's name
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Title'],
            fontSize=24,
            spaceAfter=30,
            alignment=1  # Center alignment
        )
        story.append(Paragraph(f"Interview Report - Conducted by Rick", title_style))
        story.append(Paragraph(f"Candidate: {username}", title_style))
        story.append(Spacer(1, 20))
        
        # Report metadata
        metadata_style = ParagraphStyle(
            'Metadata',
            parent=styles['Normal'],
            fontSize=12,
            spaceAfter=6
        )
        
        story.append(Paragraph(f"<b>Date:</b> {datetime.now().strftime('%B %d, %Y')}", metadata_style))
        if role:
            story.append(Paragraph(f"<b>Role:</b> {role.replace('_', ' ').title()}", metadata_style))
        story.append(Paragraph(f"<b>Total Questions:</b> {len(interview_data)}", metadata_style))
        story.append(Paragraph(f"<b>Interviewer:</b> Rick (AI Interview Assistant)", metadata_style))
        story.append(Spacer(1, 20))
        
        # Final evaluation summary
        if final_evaluation and not final_evaluation.get('error'):
            story.append(Paragraph("<b>Overall Evaluation by Rick</b>", styles['Heading2']))
            story.append(Spacer(1, 12))
            
            if 'overall_feedback' in final_evaluation:
                story.append(Paragraph(f"<b>Rick's Overall Feedback:</b> {final_evaluation['overall_feedback']}", styles['Normal']))
                story.append(Spacer(1, 12))
            
            if 'average_answer_length' in final_evaluation:
                avg_length = final_evaluation['average_answer_length']
                story.append(Paragraph(f"<b>Average Answer Length:</b> {avg_length:.0f} characters", styles['Normal']))
                story.append(Spacer(1, 12))
        
        story.append(Spacer(1, 20))
        
        # Individual Q&A sections
        story.append(Paragraph("<b>Interview Questions and Answers</b>", styles['Heading2']))
        story.append(Spacer(1, 12))
        
        for i, qa in enumerate(interview_data, 1):
            # Question
            question_text = f"<b>Question {i}:</b> {qa.get('question', 'N/A')}"
            story.append(Paragraph(question_text, styles['Heading3']))
            story.append(Spacer(1, 6))
            
            # Answer
            answer_text = f"<b>Answer:</b> {qa.get('answer', 'N/A')}"
            story.append(Paragraph(answer_text, styles['Normal']))
            story.append(Spacer(1, 6))
            
            # Feedback
            feedback_text = f"<b>Rick's Feedback:</b> {qa.get('feedback', 'No feedback available')}"
            story.append(Paragraph(feedback_text, styles['Italic']))
            story.append(Spacer(1, 12))
        
        # Recommendations section
        story.append(Spacer(1, 20))
        story.append(Paragraph("<b>Rick's Recommendations for Improvement</b>", styles['Heading2']))
        story.append(Spacer(1, 12))
        
        recommendations = [
            "Practice speaking clearly and at a moderate pace",
            "Provide specific examples to support your answers",
            "Structure your responses with clear beginning, middle, and end",
            "Show enthusiasm and passion for the role",
            "Prepare questions to ask the interviewer",
            "Research the company and role thoroughly"
        ]
        
        for rec in recommendations:
            story.append(Paragraph(f"â€¢ {rec}", styles['Normal']))
            story.append(Spacer(1, 6))
        
        # Footer
        story.append(Spacer(1, 30))
        footer_style = ParagraphStyle(
            'Footer',
            parent=styles['Normal'],
            fontSize=10,
            textColor=colors.grey,
            alignment=1
        )
        story.append(Paragraph("Generated by Rick - Your AI Interview Assistant", footer_style))
        
        doc.build(story)
        
    except Exception as e:
        pass

def write_detailed_report(username, interview_data, resume_data=None, filename="detailed_interview_report.pdf"):
    """
    Generate a more detailed report with resume analysis and Rick's personal touch - silent background operation.
    
    Args:
        username (str): Name of the candidate
        interview_data (list): List of interview Q&A data
        resume_data (dict): Parsed resume data
        filename (str): Output filename
    """
    try:
        doc = SimpleDocTemplate(filename, pagesize=letter)
        styles = getSampleStyleSheet()
        story = []
        
        # Title
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Title'],
            fontSize=24,
            spaceAfter=30,
            alignment=1
        )
        story.append(Paragraph(f"Detailed Interview Report - Conducted by Rick", title_style))
        story.append(Paragraph(f"Candidate: {username}", title_style))
        story.append(Spacer(1, 20))
        
        # Resume analysis section
        if resume_data and resume_data.get('parsed_successfully'):
            story.append(Paragraph("<b>Resume Analysis by Rick</b>", styles['Heading2']))
            story.append(Spacer(1, 12))
            
            if 'experience' in resume_data:
                exp = resume_data['experience']
                if exp.get('years_experience'):
                    story.append(Paragraph(f"<b>Years of Experience:</b> {exp['years_experience']}", styles['Normal']))
                    story.append(Spacer(1, 6))
            
            if 'skills' in resume_data:
                story.append(Paragraph("<b>Key Skills Identified by Rick:</b>", styles['Normal']))
                story.append(Spacer(1, 6))
                
                for role, skills in resume_data['skills'].items():
                    if skills:
                        role_name = role.replace('_', ' ').title()
                        skills_text = ", ".join(skills[:5])  # Show first 5 skills
                        story.append(Paragraph(f"<b>{role_name}:</b> {skills_text}", styles['Normal']))
                        story.append(Spacer(1, 6))
        
        story.append(Spacer(1, 20))
        
        # Continue with regular report content
        # (This would include the same content as write_report but with more detail)
        
        doc.build(story)
        
    except Exception as e:
        pass
